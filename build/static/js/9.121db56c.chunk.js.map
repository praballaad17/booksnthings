{"version":3,"sources":["hooks/use-photos.js","components/newpost/uploadPreview.js","components/newpost/newpost.js","services/postServices.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["usePhotos","user","pageNumber","useState","loading","setLoading","error","setError","posts","setPosts","hasMore","setMore","useEffect","getTimelinePhotos","a","following","length","getPost","_id","post","sortedPost","results","sort","b","dateA","Date","date","prevPost","console","log","userId","UploadPreview","files","onChange","className","map","file","icon","faWindowClose","onClick","handleClose","src","Newpost","loggedInUser","useContext","LoggedInUserContext","filePreviw","setFilePreviw","setFiles","caption","setCaption","history","useHistory","progress","onUploadProgress","progressEvent","progressper","Math","round","loaded","total","handleSubmit","postByUsername","username","data","push","DASHBOARD","response","name","filter","item","index","indexOf","splice","placeholder","e","target","value","faImage","type","style","opacity","position","left","prevFile","URL","createObjectURL","reader","FileReader","readAsDataURL","onload","baseURL","result","prevFiles","apiEndpoint","apiUrl","axios","Error","getUserPhotosByUsername","get","page","limit","params","deletePostById","postId","delete","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"qMAGe,SAASA,EAAUC,EAAMC,GACtC,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,oBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAA2BN,oBAAS,GAApC,mBAAOO,EAAP,KAAgBC,EAAhB,KA8BA,OA5BAC,oBAAS,sBAAC,iBAGOC,EAHP,WAAAC,EAAA,0FAAAA,EAAA,MAGR,gCAAAA,EAAA,4DAGU,OAAJb,QAAI,IAAJA,GAAA,UAAAA,EAAMc,iBAAN,eAAiBC,QAAS,GAHhC,0CAKyBC,YAAQhB,EAAKiB,IAAKhB,EAAY,GALvD,OAKYiB,EALZ,OAQYC,EAAaD,EAAKE,QAAQC,MAAK,SAACR,EAAGS,GACvC,IAAMC,EAAQ,IAAIC,KAAKX,EAAEY,MACzB,OADwC,IAAID,KAAKF,EAAEG,MACpCF,KAEjBf,GAAS,SAAAkB,GAAc,MAAM,GAAN,mBAAWA,GAAX,YAAwBP,OAC/CT,EAAQQ,EAAKE,QAAQL,OAAS,GAC9BX,GAAW,GAdjB,kDAgBME,GAAS,GACTqB,QAAQC,IAAR,MAjBN,2DAHQ,uBAGOhB,EAHP,2CACRR,GAAW,GACXE,GAAS,GAuBTM,IAzBQ,2CA0BP,QAACZ,QAAD,IAACA,OAAD,EAACA,EAAM6B,OAAP,OAAe7B,QAAf,IAAeA,OAAf,EAAeA,EAAMc,UAAWb,IAE5B,CAAEM,QAAOJ,UAASE,QAAOI,UAASD,c,iKCjC5B,SAASsB,EAAT,GAA6C,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAM3C,OAAKD,EAAMhB,OAGP,qBAAKkB,UAAU,cAAf,SACKF,EAAMG,KAAI,SAACC,GAAD,OACP,sBAAKF,UAAU,oBAAf,UACI,cAAC,IAAD,CAAiBG,KAAMC,IAAeJ,UAAU,qBAAqBK,QAAS,kBAV1E,SAACH,GACjBH,EAASG,GASuFI,CAAYJ,MAChG,qBAAKK,IAAKL,YAPA,K,qCCAf,SAASM,IACpB,IAAcC,EAAiBC,qBAAWC,KAAlC5C,KACAQ,EAAaT,cAAbS,SACR,EAA0CN,qBAA1C,mBACA,GADA,UACoCA,mBAAS,KAA7C,mBAAO2C,EAAP,KAAmBC,EAAnB,KACA,EAA0B5C,mBAAS,IAAnC,mBAAO6B,EAAP,KAAcgB,EAAd,KACA,EAA8B7C,mBAAS,IAAvC,mBAAO8C,EAAP,KAAgBC,EAAhB,KACA,EAA0B/C,qBAA1B,mBACIgD,GADJ,UACcC,eA2BRC,EAAW,CACbC,iBAAkB,SAACC,GACf,IAAIC,EAAcC,KAAKC,MAAMH,EAAcI,OAASJ,EAAcK,MAAQ,KAAO,IACjFhC,QAAQC,IAAI2B,KAIdK,EAAY,uCAAG,8BAAA/C,EAAA,+EAEUgD,YAAe9B,EAAOiB,EAASN,EAAaoB,SAAUV,GAFhE,gBAELW,EAFK,EAELA,KAERvD,EAASuD,GACTb,EAAQc,KAAKC,KALA,gDAObtC,QAAQC,IAAI,KAAMsC,UAPL,yDAAH,qDAYlB,OACI,qCACI,sBAAKjC,UAAU,gBAAf,UACI,oBAAIA,UAAU,mBAAd,sBACA,wBAAQA,UAAU,gBAAgBK,QAASsB,EAA3C,qBAEJ,sBAAK3B,UAAU,gBAAf,UACI,8BACI,cAACH,EAAD,CAAeC,MAAOc,EAAYb,SAjC1B,SAACmC,GACrBrB,EAAcD,EAAWuB,QAAO,SAAAC,GAAI,OAAIA,GAAQF,MAChD,IAAMG,EAAQzB,EAAW0B,QAAQJ,GACjCpB,EAAShB,EAAMyC,OAAOF,EAAO,SAgCrB,0BAAUrC,UAAU,sBAAsBwC,YAAY,sBAAsBzC,SAvClE,SAAC0C,GACnBzB,EAAWyB,EAAEC,OAAOC,UAuCZ,wBAAO3C,UAAU,iBAAjB,UACI,cAAC,IAAD,CAAiBG,KAAMyC,MACvB,uBAAOC,KAAK,OAAOC,MAAO,CAAEC,QAAS,EAAGC,SAAU,WAAYC,KAAM,YAAclD,SAzDzE,SAAC0C,GACtB,GAAKA,EAAEC,OAAO5C,MAAMhB,OAApB,CAEA+B,GAAc,SAAAqC,GAAQ,4BAAQA,GAAR,CAAkBC,IAAIC,gBAAgBX,EAAEC,OAAO5C,MAAM,SAC3E,IAAIuD,EAAS,IAAIC,WAEjBD,EAAOE,cAAcd,EAAEC,OAAO5C,MAAM,IAEpCuD,EAAOG,OAAS,WAEZ,IAAMC,EAAUJ,EAAOK,OACvB5C,GAAS,SAAA6C,GAAS,4BAAQA,GAAR,CAAmBF,uB,6NC5B3CG,EAAcC,IAAS,QAEhBjC,EAAc,uCAAG,WAAO9B,EAAOiB,EAASc,EAAUV,GAAjC,iBAAAvC,EAAA,+EAECkF,IAAM7E,KAAN,UAAc2E,EAAd,YAA6B/B,GAChD,CAAE/B,QAAOiB,WAAWI,GAHF,uBAEdW,EAFc,EAEdA,KAFc,kBAIf,CAAEA,SAJa,sCAMhB,IAAIiC,MAAM,KAAI9B,SAASH,KAAK1D,OANZ,yDAAH,4DAoBd4F,EAAuB,uCAAG,WAAOnC,GAAP,eAAAjD,EAAA,+EAERkF,IAAMG,IAAN,UAAaL,EAAb,uBAAuC/B,IAF/B,cAEzBI,EAFyB,yBAGxBA,EAASH,MAHe,sCAKzB,IAAIiC,MAAM,KAAI9B,SAASH,KAAK1D,OALH,yDAAH,sDAkBvBW,EAAO,uCAAG,WAAOa,EAAQsE,EAAMC,GAArB,eAAAvF,EAAA,+EAEQkF,IAAMG,IAAN,UAAaL,EAAb,sBAAsChE,GAAU,CACnEwE,OAAQ,CAAEF,KAAMA,EAAMC,MAAOA,KAHlB,cAETlC,EAFS,yBAKRA,EAASH,MALD,sCAOT,IAAIiC,MAAM,KAAI9B,SAASH,KAAK1D,OAPnB,yDAAH,0DAWPiG,EAAc,uCAAG,WAAOC,GAAP,eAAA1F,EAAA,+EAECkF,IAAMS,OAAN,UAAgBX,EAAhB,mBAAsCU,IAFvC,cAEhBrC,EAFgB,yBAGfA,EAASH,MAHM,yDAKf,KAAIG,SAASH,KAAK1D,OALH,yDAAH,uD,0FClDZ,SAASoG,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE","file":"static/js/9.121db56c.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { getPost, retrivePostByUserId } from '../services/postServices';\n\nexport default function usePhotos(user, pageNumber) {\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(false)\n  const [posts, setPosts] = useState([]);\n  const [hasMore, setMore] = useState(false)\n\n  useEffect(async () => {\n    setLoading(true)\n    setError(false)\n    async function getTimelinePhotos() {\n\n      // does the user actually follow people?\n      if (user?.following?.length > 0) {\n        try {\n          const post = await getPost(user._id, pageNumber, 5);\n\n          // re-arrange array to be newest photos first by dateCreated\n          const sortedPost = post.results.sort((a, b) => {\n            const dateA = new Date(a.date), dateB = new Date(b.date)\n            return dateB - dateA\n          })\n          setPosts(prevPost => { return [...prevPost, ...sortedPost] });\n          setMore(post.results.length > 0)\n          setLoading(false)\n        } catch (error) {\n          setError(true)\n          console.log(error);\n        }\n      }\n    }\n\n    getTimelinePhotos();\n  }, [user?.userId, user?.following, pageNumber]);\n\n  return { posts, loading, error, hasMore, setPosts };\n}\n","import React from 'react'\r\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nexport default function UploadPreview({ files, onChange }) {\r\n\r\n    const handleClose = (file) => {\r\n        onChange(file)\r\n    }\r\n\r\n    if (!files.length) return null;\r\n\r\n    return (\r\n        <div className=\"file-privew\">\r\n            {files.map((file) => (\r\n                <div className=\"file-privew__item\">\r\n                    <FontAwesomeIcon icon={faWindowClose} className=\"file-privew__close\" onClick={() => handleClose(file)} />\r\n                    <img src={file} />\r\n\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext, useState } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { faImage } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport UploadPreview from './uploadPreview'\r\nimport LoggedInUserContext from '../../context/logged-in-user'\r\nimport usePhotos from '../../hooks/use-photos'\r\nimport { DASHBOARD } from '../../constants/routes'\r\nimport { postByUsername } from '../../services/postServices';\r\n\r\nexport default function Newpost() {\r\n    const { user: loggedInUser } = useContext(LoggedInUserContext);\r\n    const { setPosts } = usePhotos()\r\n    const [selectedFiles, setSelectedFiles] = useState()\r\n    const [filePreviw, setFilePreviw] = useState([])\r\n    const [files, setFiles] = useState([])\r\n    const [caption, setCaption] = useState(\"\")\r\n    let [result, setResult] = useState();\r\n    let history = useHistory()\r\n\r\n    const handleFileUpload = (e) => {\r\n        if (!e.target.files.length) return;\r\n\r\n        setFilePreviw(prevFile => [...prevFile, URL.createObjectURL(e.target.files[0])])\r\n        let reader = new FileReader();\r\n        // Convert the file to base64 text\r\n        reader.readAsDataURL(e.target.files[0]);\r\n        // on reader load somthing...\r\n        reader.onload = () => {\r\n            // Make a fileInfo Object\r\n            const baseURL = reader.result;\r\n            setFiles(prevFiles => [...prevFiles, baseURL])\r\n        }\r\n    }\r\n\r\n    const handleCaption = (e) => {\r\n        setCaption(e.target.value)\r\n    }\r\n\r\n    const handleFileCross = (name) => {\r\n        setFilePreviw(filePreviw.filter(item => item != name))\r\n        const index = filePreviw.indexOf(name)\r\n        setFiles(files.splice(index, 1))\r\n    }\r\n\r\n    const progress = {\r\n        onUploadProgress: (progressEvent) => {\r\n            let progressper = Math.round(progressEvent.loaded / progressEvent.total * 100) + \"%\";\r\n            console.log(progressper);\r\n        }\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        try {\r\n            const { data } = await postByUsername(files, caption, loggedInUser.username, progress)\r\n            // const res = await postByUsername(formData, loggedInUser.username)\r\n            setPosts(data)\r\n            history.push(DASHBOARD)\r\n        } catch (error) {\r\n            console.log(error.response);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"newpost__head\">\r\n                <h3 className=\"heading-tertiary\">New Post</h3>\r\n                <button className=\"btn btn--grey\" onClick={handleSubmit}>Post</button>\r\n            </div>\r\n            <div className=\"newpost__main\">\r\n                <div>\r\n                    <UploadPreview files={filePreviw} onChange={handleFileCross} />\r\n                </div>\r\n                <textarea className=\"newpost__input-text\" placeholder=\"compose new post...\" onChange={handleCaption} />\r\n                <label className=\"newpost__media\">\r\n                    <FontAwesomeIcon icon={faImage} />\r\n                    <input type=\"file\" style={{ opacity: 0, position: \"absolute\", left: \"-99999px\" }} onChange={handleFileUpload} />\r\n                </label>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import axios from 'axios';\r\nimport { apiUrl } from \"../config.json\";\r\n\r\nconst apiEndpoint = apiUrl + \"/post\";\r\n\r\nexport const postByUsername = async (files, caption, username, progress) => {\r\n    try {\r\n        const { data } = await axios.post(`${apiEndpoint}/${username}`,\r\n            { files, caption }, progress);\r\n        return { data };\r\n    } catch (err) {\r\n        throw new Error(err.response.data.error);\r\n    }\r\n};\r\n\r\nexport const retrivePostByUsername = async (username) => {\r\n    try {\r\n        const response = await axios.get(`${apiEndpoint}/${username}`);\r\n        return response.data;\r\n    } catch (err) {\r\n        throw new Error(err.response.data.error);\r\n    }\r\n};\r\n\r\n\r\nexport const getUserPhotosByUsername = async (username) => {\r\n    try {\r\n        const response = await axios.get(`${apiEndpoint}/user-posts/${username}`);\r\n        return response.data;\r\n    } catch (err) {\r\n        throw new Error(err.response.data.error);\r\n    }\r\n};\r\n\r\nexport const retrivePostByUserId = async (userId) => {\r\n    try {\r\n        const response = await axios.get(`${apiEndpoint}/userId/${userId}`);\r\n        return response.data;\r\n    } catch (err) {\r\n        throw new Error(err.response.data.error);\r\n    }\r\n};\r\n\r\nexport const getPost = async (userId, page, limit) => {\r\n    try {\r\n        const response = await axios.get(`${apiEndpoint}/all-posts/${userId}`, {\r\n            params: { page: page, limit: limit }\r\n        });\r\n        return response.data;\r\n    } catch (err) {\r\n        throw new Error(err.response.data.error);\r\n    }\r\n};\r\n\r\nexport const deletePostById = async (postId) => {\r\n    try {\r\n        const response = await axios.delete(`${apiEndpoint}/delete/${postId}`);\r\n        return response.data;\r\n    } catch (err) {\r\n        return err.response.data.error;\r\n    }\r\n};","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}