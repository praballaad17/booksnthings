{"version":3,"sources":["constants/routes.js","context/user.js","services/authenticationServices.js","components/loader.js","helpers/protected-route.js","App.js","hooks/use-auth-listener.js","index.js"],"names":["DASHBOARD","LOGIN","SIGN_UP","PROFILE","NOT_FOUND","MESSAGES","NEWPOST","UserContext","createContext","jwt","apiEndpoint","apiUrl","tokenKey","localStorage","getItem","axios","defaults","headers","common","login","usernameOrEmail","password","authToken","a","request","data","authorization","method","response","setItem","token","Error","error","registerUser","username","fullName","email","post","logout","removeItem","getCurrentUser","jwtDecode","ReactLoader","type","color","height","width","className","ProtectedRoute","children","rest","user","render","location","React","cloneElement","to","pathname","ROUTES","state","from","Login","lazy","SignUp","Dashboard","NotFound","App","useState","setUser","useEffect","useAuthListener","console","log","Provider","value","fallback","path","component","ReactDOM","document","getElementById"],"mappings":"uGAAA,8OAAO,IAAMA,EAAY,IACZC,EAAQ,SACRC,EAAU,WACVC,EAAU,kBACVC,EAAY,aACZC,EAAW,YACXC,EAAU,Y,gCCNvB,WAEMC,EAAcC,wBAAc,MACnBD,O,uQCGCE,E,iEAFVC,EAAcC,IAAS,QACvBC,EAAW,QACDH,EAOPI,aAAaC,QAAQF,GAN5BG,IAAMC,SAASC,QAAQC,OAAO,gBAAkBT,EAgB3C,IAAMU,EAAK,uCAAG,WAAOC,EAAiBC,EAAUC,GAAlC,iBAAAC,EAAA,sEAEXC,EACJJ,GAAmBC,EACf,CAAEI,KAAM,CAAEL,kBAAiBC,aAC3B,CAAEJ,QAAS,CAAES,cAAeJ,IALjB,SAMMP,IAAM,GAAD,OAAIL,EAAJ,uBAC1BiB,OAAQ,QACLH,IARY,cAMXI,EANW,OAUjBf,aAAagB,QAAQjB,EAAUgB,EAASH,KAAKK,OAV5B,kBAWVF,EAASH,MAXC,sCAaX,IAAIM,MAAM,KAAIH,SAASH,KAAKO,OAbjB,yDAAH,0DA0BLC,EAAY,uCAAG,WAAOC,EAAUC,EAAUC,EAAOf,GAAlC,eAAAE,EAAA,+EAEDR,IAAMsB,KAAN,UAAc3B,EAAd,aAAsC,CAC3D0B,QACAD,WACAD,WACAb,aANsB,cAElBO,EAFkB,OAQxBf,aAAagB,QAAQjB,EAAUgB,EAASH,KAAKK,OARrB,kBASjBF,EAASH,MATQ,sCAWlB,IAAIM,MAAM,KAAIH,SAASH,KAAKO,OAXV,yDAAH,4DA4DlB,SAAeM,IAAtB,+B,4CAAO,sBAAAf,EAAA,sDACLV,aAAa0B,WAAW3B,GADnB,4C,sBAIA,SAAS4B,IACd,IACE,IAAM/B,EAAMI,aAAaC,QAAQF,GACjC,OAAO6B,YAAUhC,GACjB,MAAOuB,GACP,OAAO,Q,6JCpHI,SAASU,IACtB,OACE,cAAC,IAAD,CACEC,KAAK,WACLC,MAAM,YACNC,OAAQ,GACRC,MAAO,GACPC,UAAU,8B,+ECDD,SAASC,EAAT,GAAgD,IAAtBC,EAAqB,EAArBA,SAAaC,EAAQ,iBACtDC,EAAOX,cACb,OACE,cAAC,IAAD,2BACMU,GADN,IAEEE,OAAQ,YAAmB,IAAhBC,EAAe,EAAfA,SACT,OAAIF,EACKG,IAAMC,aAAaN,EAAU,CAAEE,SAGnCA,EAWE,KATH,cAAC,IAAD,CACEK,GAAI,CACFC,SAAUC,IACVC,MAAO,CAAEC,KAAMP,UCd/B,IAAMQ,EAAQC,gBAAK,kBAAM,kCACnBC,EAASD,gBAAK,kBAAM,kCACpBE,EAAYF,gBAAK,kBAAM,uDAEvBG,EAAWH,gBAAK,kBAAM,uDAEb,SAASI,IACtB,IAAMf,ECbO,WACb,MAAwBgB,qBAAxB,mBAAOhB,EAAP,KAAaiB,EAAb,KAUA,OATAC,qBAAU,WACR,IACE,IAAM5D,EAAMI,aAAaC,QAAQ,SACjCsD,EAAQ3B,YAAUhC,IAClB,MAAOuB,GACPoC,EAAQ,SAET,IAEIjB,EDEMmB,GAGb,OAFAC,QAAQC,IAAIrB,GAGV,cAAC,IAAYsB,SAAb,CAAsBC,MAAO,CAAEvB,QAA/B,SACE,cAAC,IAAD,UACE,cAAC,WAAD,CAAUwB,SAAU,cAACjC,EAAD,IAApB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOkC,KAAMlB,IAAcmB,UAAWhB,IACtC,cAAC,IAAD,CAAOe,KAAMlB,IAAgBmB,UAAWd,IAExC,cAACf,EAAD,CAAgBG,KAAMA,EAAMyB,KAAMlB,IAAlC,SACE,cAACM,EAAD,MAEF,cAAC,IAAD,CAAOa,UAAWZ,a,YExB9Ba,IAAS1B,OACP,cAACc,EAAD,IACAa,SAASC,eAAe,W","file":"static/js/main.47835e04.chunk.js","sourcesContent":["export const DASHBOARD = '/';\nexport const LOGIN = '/login';\nexport const SIGN_UP = '/sign-up';\nexport const PROFILE = '/user/:username';\nexport const NOT_FOUND = '/not-found';\nexport const MESSAGES = '/messages';\nexport const NEWPOST = '/newpost';\n","import { createContext } from 'react';\n\nconst UserContext = createContext(null);\nexport default UserContext;\n","import axios from 'axios';\nimport { apiUrl } from \"../config.json\";\nimport jwtDecode from 'jwt-decode';\n\nconst apiEndpoint = apiUrl + \"/auth\";\nconst tokenKey = \"token\"\nfunction setJwt(jwt) {\n  axios.defaults.headers.common['x-auth-token'] = jwt\n}\n\nsetJwt(getJwt())\n\nexport function getJwt() {\n  return localStorage.getItem(tokenKey)\n}\n/**\n * Logs a user in with the provided credentials\n * @function login\n * @param {string} usernameOrEmail The username or email to login with\n * @param {string} password A password to log in with\n * @param {string} authToken A token to be used instead of a username/email or password\n * @returns {object} The user object\n */\nexport const login = async (usernameOrEmail, password, authToken) => {\n  try {\n    const request =\n      usernameOrEmail && password\n        ? { data: { usernameOrEmail, password } }\n        : { headers: { authorization: authToken } };\n    const response = await axios(`${apiEndpoint}/login`, {\n      method: 'POST',\n      ...request,\n    });\n    localStorage.setItem(tokenKey, response.data.token)\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n\n\n/**\n * Registers a user with the provided credentials\n * @param {string} email A user's email address\n * @param {string} fullName A user's full name\n * @param {string} username A user's username\n * @param {string} password A user's password\n * @returns {object} The user object\n */\nexport const registerUser = async (username, fullName, email, password) => {\n  try {\n    const response = await axios.post(`${apiEndpoint}/register`, {\n      email,\n      fullName,\n      username,\n      password,\n    });\n    localStorage.setItem(tokenKey, response.data.token)\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n\n/**\n * Changes a users password\n * @function changePassword\n * @param {string} oldPassword The user's current password\n * @param {string} newPassword The new password\n * @param {string} authToken A user's auth token\n */\nexport const changePassword = async (oldPassword, newPassword, authToken) => {\n  try {\n    await axios.put(\n      `${apiEndpoint}/password`,\n      {\n        oldPassword,\n        newPassword,\n      },\n      {\n        headers: {\n          authorization: authToken,\n        },\n      }\n    );\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n\nexport const getUserByUserId = async (id) => {\n  try {\n    const response = await axios.get(`${apiEndpoint}/userId/${id}`);\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n}\n\n\nexport const getusersFollowersById = async (userId) => {\n  try {\n    const response = await axios.get(`${apiUrl}/user/userId/followers/${userId}`);\n    return response.data;\n  } catch (err) {\n    throw new Error(err);\n  }\n}\n\nexport async function logout() {\n  localStorage.removeItem(tokenKey)\n}\n\nexport function getCurrentUser() {\n  try {\n    const jwt = localStorage.getItem(tokenKey);\n    return jwtDecode(jwt);\n  } catch (error) {\n    return null;\n  }\n}","import Loader from 'react-loader-spinner';\n\nexport default function ReactLoader() {\n  return (\n    <Loader\n      type=\"TailSpin\"\n      color=\"#00000059\"\n      height={70}\n      width={70}\n      className=\"flex justify-center mt-12\"\n    />\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Redirect, useLocation } from 'react-router-dom';\nimport * as ROUTES from '../constants/routes';\nimport { useContext } from 'react';\nimport UserContext from '../context/user';\nimport { getCurrentUser } from '../services/authenticationServices';\n\nexport default function ProtectedRoute({ children, ...rest }) {\n  const user = getCurrentUser()\n  return (\n    <Route\n      {...rest}\n      render={({ location }) => {\n        if (user) {\n          return React.cloneElement(children, { user });\n        }\n\n        if (!user) {\n          return (\n            <Redirect\n              to={{\n                pathname: ROUTES.LOGIN,\n                state: { from: location }\n              }}\n            />\n          );\n        }\n\n        return null;\n      }}\n    />\n  );\n}\n\nProtectedRoute.propTypes = {\n  user: PropTypes.object,\n  children: PropTypes.object.isRequired\n};\n","import { lazy, Suspense, useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport ReactLoader from './components/loader';\nimport * as ROUTES from './constants/routes';\nimport UserContext from './context/user';\nimport useAuthListener from './hooks/use-auth-listener';\n\nimport ProtectedRoute from './helpers/protected-route';\n\nconst Login = lazy(() => import('./pages/login'));\nconst SignUp = lazy(() => import('./pages/sign-up'));\nconst Dashboard = lazy(() => import('./pages/dashboard'));\nconst Profile = lazy(() => import('./pages/profile'));\nconst NotFound = lazy(() => import('./pages/not-found'));\n\nexport default function App() {\n  const user = useAuthListener()\n  console.log(user);\n\n  return (\n    <UserContext.Provider value={{ user }}>\n      <Router>\n        <Suspense fallback={<ReactLoader />}>\n          <Switch>\n            <Route path={ROUTES.LOGIN} component={Login} />\n            <Route path={ROUTES.SIGN_UP} component={SignUp} />\n            {/* <Route path={ROUTES.PROFILE} component={Profile} /> */}\n            <ProtectedRoute user={user} path={ROUTES.DASHBOARD}  >\n              <Dashboard />\n            </ProtectedRoute>\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Router>\n    </UserContext.Provider>\n  );\n}\n","import { useState, useEffect, useContext } from 'react';\nimport jwtDecode from 'jwt-decode';\n\nexport default function useAuthListener() {\n  const [user, setUser] = useState();\n  useEffect(() => {\n    try {\n      const jwt = localStorage.getItem('token')\n      setUser(jwtDecode(jwt));\n    } catch (error) {\n      setUser(null);\n    }\n  }, []);\n\n  return user;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/app.css';\nimport './css/style.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}